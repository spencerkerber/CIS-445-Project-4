MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 12, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:31:48" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 12, 2015
Time:                13:31:48
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1KE33JE "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1KE33JE new;
MPRINT(EM_DIAGRAM):   run;
38683      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
38684      *------------------------------------------------------------*;
38685      * Reg: Scoring DATA data;
38686      *------------------------------------------------------------*;
38687      data EMWS1.Reg_TRAIN
38688      / view=EMWS1.Reg_TRAIN
38689      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
38690      set EMWS1.BINNING_TRAIN
38691      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN ;
38692      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
38693     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
38694     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
38695     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
38696     +
38697     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
38698     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
38699     +
38700     +drop _Y;
MPRINT(EM_DIAGRAM):   drop _Y;
38701     +_Y = SalePrice ;
MPRINT(EM_DIAGRAM):   _Y = SalePrice ;
38702     +
38703     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
38704     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
38705     +
38706     +*** Generate dummy variables for GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Age ;
38707     +drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
38708     +if missing( GRP_Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Age ) then do;
38709     +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
38710     +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
38711     +   _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
38712     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38713     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38714     +end;
MPRINT(EM_DIAGRAM):   end;
38715     +else do;
MPRINT(EM_DIAGRAM):   else do;
38716     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38717     +   _dm12 = put( GRP_Age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Age , BEST12. );
38718     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38719     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
38720     +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
38721     +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
38722     +      _0_2 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
38723     +   end;
MPRINT(EM_DIAGRAM):   end;
38724     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
38725     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
38726     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
38727     +      _0_2 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
38728     +   end;
MPRINT(EM_DIAGRAM):   end;
38729     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
38730     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
38731     +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
38732     +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
38733     +   end;
MPRINT(EM_DIAGRAM):   end;
38734     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
38735     +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
38736     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
38737     +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
38738     +   end;
MPRINT(EM_DIAGRAM):   end;
38739     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38740     +      _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
38741     +      _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
38742     +      _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
38743     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38744     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38745     +   end;
MPRINT(EM_DIAGRAM):   end;
38746     +end;
MPRINT(EM_DIAGRAM):   end;
38747     +
38748     +*** Generate dummy variables for GRP_BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_BasementType ;
38749     +drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
38750     +if missing( GRP_BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_BasementType ) then do;
38751     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
38752     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
38753     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38754     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38755     +end;
MPRINT(EM_DIAGRAM):   end;
38756     +else do;
MPRINT(EM_DIAGRAM):   else do;
38757     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38758     +   _dm12 = put( GRP_BasementType , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_BasementType , BEST12. );
38759     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38760     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
38761     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
38762     +      _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
38763     +   end;
MPRINT(EM_DIAGRAM):   end;
38764     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
38765     +      _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
38766     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
38767     +   end;
MPRINT(EM_DIAGRAM):   end;
38768     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
38769     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
38770     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
38771     +   end;
MPRINT(EM_DIAGRAM):   end;
38772     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38773     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
38774     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
38775     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38776     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38777     +   end;
MPRINT(EM_DIAGRAM):   end;
38778     +end;
MPRINT(EM_DIAGRAM):   end;
38779     +
38780     +*** Generate dummy variables for GRP_Baths ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Baths ;
38781     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
38782     +if missing( GRP_Baths ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Baths ) then do;
38783     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
38784     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38785     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38786     +end;
MPRINT(EM_DIAGRAM):   end;
38787     +else do;
MPRINT(EM_DIAGRAM):   else do;
38788     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38789     +   _dm12 = put( GRP_Baths , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Baths , BEST12. );
38790     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38791     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
38792     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
38793     +   end;
MPRINT(EM_DIAGRAM):   end;
38794     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
38795     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
38796     +   end;
MPRINT(EM_DIAGRAM):   end;
38797     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38798     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
38799     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38800     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38801     +   end;
MPRINT(EM_DIAGRAM):   end;
38802     +end;
MPRINT(EM_DIAGRAM):   end;
38803     +
38804     +*** Generate dummy variables for GRP_CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_CentralAir ;
38805     +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
38806     +if missing( GRP_CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_CentralAir ) then do;
38807     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
38808     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38809     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38810     +end;
MPRINT(EM_DIAGRAM):   end;
38811     +else do;
MPRINT(EM_DIAGRAM):   else do;
38812     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38813     +   _dm12 = put( GRP_CentralAir , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_CentralAir , BEST12. );
38814     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38815     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
38816     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
38817     +   end;
MPRINT(EM_DIAGRAM):   end;
38818     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
38819     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
38820     +   end;
MPRINT(EM_DIAGRAM):   end;
38821     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38822     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
38823     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38824     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38825     +   end;
MPRINT(EM_DIAGRAM):   end;
38826     +end;
MPRINT(EM_DIAGRAM):   end;
38827     +
38828     +*** Generate dummy variables for GRP_FirePlace ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_FirePlace ;
38829     +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
38830     +if missing( GRP_FirePlace ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_FirePlace ) then do;
38831     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
38832     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38833     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38834     +end;
MPRINT(EM_DIAGRAM):   end;
38835     +else do;
MPRINT(EM_DIAGRAM):   else do;
38836     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38837     +   _dm12 = put( GRP_FirePlace , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_FirePlace , BEST12. );
38838     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38839     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
38840     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
38841     +   end;
MPRINT(EM_DIAGRAM):   end;
38842     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
38843     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
38844     +   end;
MPRINT(EM_DIAGRAM):   end;
38845     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38846     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
38847     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38848     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38849     +   end;
MPRINT(EM_DIAGRAM):   end;
38850     +end;
MPRINT(EM_DIAGRAM):   end;
38851     +
38852     +*** Generate dummy variables for GRP_GarageSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_GarageSize ;
38853     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
38854     +if missing( GRP_GarageSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_GarageSize ) then do;
38855     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
38856     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38857     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38858     +end;
MPRINT(EM_DIAGRAM):   end;
38859     +else do;
MPRINT(EM_DIAGRAM):   else do;
38860     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38861     +   _dm12 = put( GRP_GarageSize , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_GarageSize , BEST12. );
38862     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38863     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
38864     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
38865     +   end;
MPRINT(EM_DIAGRAM):   end;
38866     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
38867     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
38868     +   end;
MPRINT(EM_DIAGRAM):   end;
38869     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38870     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
38871     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38872     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38873     +   end;
MPRINT(EM_DIAGRAM):   end;
38874     +end;
MPRINT(EM_DIAGRAM):   end;
38875     +
38876     +*** Generate dummy variables for GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_TotalArea ;
38877     +drop _6_0 _6_1 _6_2 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 ;
38878     +if missing( GRP_TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_TotalArea ) then do;
38879     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
38880     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
38881     +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
38882     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
38883     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38884     +end;
MPRINT(EM_DIAGRAM):   end;
38885     +else do;
MPRINT(EM_DIAGRAM):   else do;
38886     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
38887     +   _dm12 = put( GRP_TotalArea , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_TotalArea , BEST12. );
38888     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
38889     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
38890     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
38891     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
38892     +      _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
38893     +   end;
MPRINT(EM_DIAGRAM):   end;
38894     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
38895     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
38896     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
38897     +      _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
38898     +   end;
MPRINT(EM_DIAGRAM):   end;
38899     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
38900     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
38901     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
38902     +      _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
38903     +   end;
MPRINT(EM_DIAGRAM):   end;
38904     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
38905     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
38906     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
38907     +      _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
38908     +   end;
MPRINT(EM_DIAGRAM):   end;
38909     +   else do;
MPRINT(EM_DIAGRAM):   else do;
38910     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
38911     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
38912     +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
38913     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
38914     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
38915     +   end;
MPRINT(EM_DIAGRAM):   end;
38916     +end;
MPRINT(EM_DIAGRAM):   end;
38917     +
38918     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
38919     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
38920     +   _LP0 =     75017.5647668393;
MPRINT(EM_DIAGRAM):   _LP0 = 75017.5647668393;
38921     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
38922     +end;
MPRINT(EM_DIAGRAM):   end;
38923     +
38924     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
38925     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
38926     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
38927     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
38928     +
38929     +***  Effect: GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Age ;
38930     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38931     +_LP0 = _LP0 + (    4865.44088732322) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4865.44088732322) * _TEMP * _0_0;
38932     +_LP0 = _LP0 + (   -568.165965743325) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -568.165965743325) * _TEMP * _0_1;
38933     +_LP0 = _LP0 + (   -1497.38707585112) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1497.38707585112) * _TEMP * _0_2;
38934     +
38935     +***  Effect: GRP_BasementType ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_BasementType ;
38936     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38937     +_LP0 = _LP0 + (    3919.57591308007) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3919.57591308007) * _TEMP * _1_0;
38938     +_LP0 = _LP0 + (    1883.25615871246) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1883.25615871246) * _TEMP * _1_1;
38939     +
38940     +***  Effect: GRP_Baths ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Baths ;
38941     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38942     +_LP0 = _LP0 + (   -694.297783815494) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -694.297783815494) * _TEMP * _2_0;
38943     +
38944     +***  Effect: GRP_CentralAir ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_CentralAir ;
38945     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38946     +_LP0 = _LP0 + (    1250.98870475304) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1250.98870475304) * _TEMP * _3_0;
38947     +
38948     +***  Effect: GRP_FirePlace ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_FirePlace ;
38949     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38950     +_LP0 = _LP0 + (   -2961.13158510614) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2961.13158510614) * _TEMP * _4_0;
38951     +
38952     +***  Effect: GRP_GarageSize ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_GarageSize ;
38953     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38954     +_LP0 = _LP0 + (   -3666.90689270789) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3666.90689270789) * _TEMP * _5_0;
38955     +
38956     +***  Effect: GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_TotalArea ;
38957     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
38958     +_LP0 = _LP0 + (   -2003.67479315007) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2003.67479315007) * _TEMP * _6_0;
38959     +_LP0 = _LP0 + (   -3834.36786615035) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3834.36786615035) * _TEMP * _6_1;
38960     +_LP0 = _LP0 + (    -1635.4807000685) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1635.4807000685) * _TEMP * _6_2;
38961     +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
38962     +_LP0 = _LP0 + (    66921.6775629157);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 66921.6775629157);
38963     +
38964     +REGDR1:
38965     +
38966     +*** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   REGDR1: *** Predicted Value, Error, and Residual;
38967     +label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
38968     +P_SalePrice = _LP0;
MPRINT(EM_DIAGRAM):   P_SalePrice = _LP0;
38969     +
38970     +drop _R;
MPRINT(EM_DIAGRAM):   drop _R;
38971     +if _Y = . then do;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
38972     +   R_SalePrice = .;
MPRINT(EM_DIAGRAM):   R_SalePrice = .;
38973     +end;
MPRINT(EM_DIAGRAM):   end;
38974     +else do;
MPRINT(EM_DIAGRAM):   else do;
38975     +   _R = _Y - _LP0;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
38976     +    label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
38977     +   R_SalePrice = _R;
MPRINT(EM_DIAGRAM):   R_SalePrice = _R;
38978     +end;
MPRINT(EM_DIAGRAM):   end;
38979     +
38980     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
38981     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
38982     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
38983      run;

NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.29 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.34 seconds
      cpu time            0.31 seconds
      

MPRINT(EM_DIAGRAM):   quit;
38984      quit;
38985      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
38986      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
38987      *------------------------------------------------------------*;
38988      * Reg: Scoring VALIDATE data;
38989      *------------------------------------------------------------*;
38990      data EMWS1.Reg_VALIDATE
38991      / view=EMWS1.Reg_VALIDATE
38992      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
38993      set EMWS1.BINNING_VALIDATE
38994      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_VALIDATE ;
38995      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
38996     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
38997     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
38998     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
38999     +
39000     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
39001     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
39002     +
39003     +drop _Y;
MPRINT(EM_DIAGRAM):   drop _Y;
39004     +_Y = SalePrice ;
MPRINT(EM_DIAGRAM):   _Y = SalePrice ;
39005     +
39006     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
39007     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
39008     +
39009     +*** Generate dummy variables for GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Age ;
39010     +drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
39011     +if missing( GRP_Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Age ) then do;
39012     +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
39013     +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
39014     +   _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
39015     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39016     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39017     +end;
MPRINT(EM_DIAGRAM):   end;
39018     +else do;
MPRINT(EM_DIAGRAM):   else do;
39019     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39020     +   _dm12 = put( GRP_Age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Age , BEST12. );
39021     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39022     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
39023     +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
39024     +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
39025     +      _0_2 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
39026     +   end;
MPRINT(EM_DIAGRAM):   end;
39027     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
39028     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
39029     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
39030     +      _0_2 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
39031     +   end;
MPRINT(EM_DIAGRAM):   end;
39032     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
39033     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
39034     +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
39035     +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
39036     +   end;
MPRINT(EM_DIAGRAM):   end;
39037     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
39038     +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
39039     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
39040     +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
39041     +   end;
MPRINT(EM_DIAGRAM):   end;
39042     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39043     +      _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
39044     +      _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
39045     +      _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
39046     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39047     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39048     +   end;
MPRINT(EM_DIAGRAM):   end;
39049     +end;
MPRINT(EM_DIAGRAM):   end;
39050     +
39051     +*** Generate dummy variables for GRP_BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_BasementType ;
39052     +drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
39053     +if missing( GRP_BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_BasementType ) then do;
39054     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
39055     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
39056     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39057     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39058     +end;
MPRINT(EM_DIAGRAM):   end;
39059     +else do;
MPRINT(EM_DIAGRAM):   else do;
39060     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39061     +   _dm12 = put( GRP_BasementType , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_BasementType , BEST12. );
39062     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39063     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
39064     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
39065     +      _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
39066     +   end;
MPRINT(EM_DIAGRAM):   end;
39067     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
39068     +      _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
39069     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
39070     +   end;
MPRINT(EM_DIAGRAM):   end;
39071     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
39072     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
39073     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
39074     +   end;
MPRINT(EM_DIAGRAM):   end;
39075     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39076     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
39077     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
39078     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39079     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39080     +   end;
MPRINT(EM_DIAGRAM):   end;
39081     +end;
MPRINT(EM_DIAGRAM):   end;
39082     +
39083     +*** Generate dummy variables for GRP_Baths ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_Baths ;
39084     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
39085     +if missing( GRP_Baths ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_Baths ) then do;
39086     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
39087     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39088     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39089     +end;
MPRINT(EM_DIAGRAM):   end;
39090     +else do;
MPRINT(EM_DIAGRAM):   else do;
39091     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39092     +   _dm12 = put( GRP_Baths , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_Baths , BEST12. );
39093     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39094     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
39095     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
39096     +   end;
MPRINT(EM_DIAGRAM):   end;
39097     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
39098     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
39099     +   end;
MPRINT(EM_DIAGRAM):   end;
39100     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39101     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
39102     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39103     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39104     +   end;
MPRINT(EM_DIAGRAM):   end;
39105     +end;
MPRINT(EM_DIAGRAM):   end;
39106     +
39107     +*** Generate dummy variables for GRP_CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_CentralAir ;
39108     +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
39109     +if missing( GRP_CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_CentralAir ) then do;
39110     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
39111     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39112     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39113     +end;
MPRINT(EM_DIAGRAM):   end;
39114     +else do;
MPRINT(EM_DIAGRAM):   else do;
39115     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39116     +   _dm12 = put( GRP_CentralAir , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_CentralAir , BEST12. );
39117     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39118     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
39119     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
39120     +   end;
MPRINT(EM_DIAGRAM):   end;
39121     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
39122     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
39123     +   end;
MPRINT(EM_DIAGRAM):   end;
39124     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39125     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
39126     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39127     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39128     +   end;
MPRINT(EM_DIAGRAM):   end;
39129     +end;
MPRINT(EM_DIAGRAM):   end;
39130     +
39131     +*** Generate dummy variables for GRP_FirePlace ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_FirePlace ;
39132     +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
39133     +if missing( GRP_FirePlace ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_FirePlace ) then do;
39134     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
39135     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39136     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39137     +end;
MPRINT(EM_DIAGRAM):   end;
39138     +else do;
MPRINT(EM_DIAGRAM):   else do;
39139     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39140     +   _dm12 = put( GRP_FirePlace , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_FirePlace , BEST12. );
39141     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39142     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
39143     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
39144     +   end;
MPRINT(EM_DIAGRAM):   end;
39145     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
39146     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
39147     +   end;
MPRINT(EM_DIAGRAM):   end;
39148     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39149     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
39150     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39151     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39152     +   end;
MPRINT(EM_DIAGRAM):   end;
39153     +end;
MPRINT(EM_DIAGRAM):   end;
39154     +
39155     +*** Generate dummy variables for GRP_GarageSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_GarageSize ;
39156     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
39157     +if missing( GRP_GarageSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_GarageSize ) then do;
39158     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
39159     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39160     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39161     +end;
MPRINT(EM_DIAGRAM):   end;
39162     +else do;
MPRINT(EM_DIAGRAM):   else do;
39163     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39164     +   _dm12 = put( GRP_GarageSize , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_GarageSize , BEST12. );
39165     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39166     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
39167     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
39168     +   end;
MPRINT(EM_DIAGRAM):   end;
39169     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
39170     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
39171     +   end;
MPRINT(EM_DIAGRAM):   end;
39172     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39173     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
39174     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39175     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39176     +   end;
MPRINT(EM_DIAGRAM):   end;
39177     +end;
MPRINT(EM_DIAGRAM):   end;
39178     +
39179     +*** Generate dummy variables for GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_TotalArea ;
39180     +drop _6_0 _6_1 _6_2 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 ;
39181     +if missing( GRP_TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_TotalArea ) then do;
39182     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
39183     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
39184     +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
39185     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
39186     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39187     +end;
MPRINT(EM_DIAGRAM):   end;
39188     +else do;
MPRINT(EM_DIAGRAM):   else do;
39189     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
39190     +   _dm12 = put( GRP_TotalArea , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_TotalArea , BEST12. );
39191     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
39192     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
39193     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
39194     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
39195     +      _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
39196     +   end;
MPRINT(EM_DIAGRAM):   end;
39197     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
39198     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
39199     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
39200     +      _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
39201     +   end;
MPRINT(EM_DIAGRAM):   end;
39202     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
39203     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
39204     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
39205     +      _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
39206     +   end;
MPRINT(EM_DIAGRAM):   end;
39207     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
39208     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
39209     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
39210     +      _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
39211     +   end;
MPRINT(EM_DIAGRAM):   end;
39212     +   else do;
MPRINT(EM_DIAGRAM):   else do;
39213     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
39214     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
39215     +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
39216     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
39217     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
39218     +   end;
MPRINT(EM_DIAGRAM):   end;
39219     +end;
MPRINT(EM_DIAGRAM):   end;
39220     +
39221     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
39222     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
39223     +   _LP0 =     75017.5647668393;
MPRINT(EM_DIAGRAM):   _LP0 = 75017.5647668393;
39224     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
39225     +end;
MPRINT(EM_DIAGRAM):   end;
39226     +
39227     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
39228     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
39229     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
39230     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
39231     +
39232     +***  Effect: GRP_Age ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Age ;
39233     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39234     +_LP0 = _LP0 + (    4865.44088732322) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4865.44088732322) * _TEMP * _0_0;
39235     +_LP0 = _LP0 + (   -568.165965743325) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -568.165965743325) * _TEMP * _0_1;
39236     +_LP0 = _LP0 + (   -1497.38707585112) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1497.38707585112) * _TEMP * _0_2;
39237     +
39238     +***  Effect: GRP_BasementType ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_BasementType ;
39239     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39240     +_LP0 = _LP0 + (    3919.57591308007) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3919.57591308007) * _TEMP * _1_0;
39241     +_LP0 = _LP0 + (    1883.25615871246) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1883.25615871246) * _TEMP * _1_1;
39242     +
39243     +***  Effect: GRP_Baths ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_Baths ;
39244     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39245     +_LP0 = _LP0 + (   -694.297783815494) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -694.297783815494) * _TEMP * _2_0;
39246     +
39247     +***  Effect: GRP_CentralAir ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_CentralAir ;
39248     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39249     +_LP0 = _LP0 + (    1250.98870475304) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1250.98870475304) * _TEMP * _3_0;
39250     +
39251     +***  Effect: GRP_FirePlace ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_FirePlace ;
39252     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39253     +_LP0 = _LP0 + (   -2961.13158510614) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2961.13158510614) * _TEMP * _4_0;
39254     +
39255     +***  Effect: GRP_GarageSize ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_GarageSize ;
39256     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39257     +_LP0 = _LP0 + (   -3666.90689270789) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3666.90689270789) * _TEMP * _5_0;
39258     +
39259     +***  Effect: GRP_TotalArea ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_TotalArea ;
39260     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
39261     +_LP0 = _LP0 + (   -2003.67479315007) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2003.67479315007) * _TEMP * _6_0;
39262     +_LP0 = _LP0 + (   -3834.36786615035) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3834.36786615035) * _TEMP * _6_1;
39263     +_LP0 = _LP0 + (    -1635.4807000685) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1635.4807000685) * _TEMP * _6_2;
39264     +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
39265     +_LP0 = _LP0 + (    66921.6775629157);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 66921.6775629157);
39266     +
39267     +REGDR1:
39268     +
39269     +*** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   REGDR1: *** Predicted Value, Error, and Residual;
39270     +label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
39271     +P_SalePrice = _LP0;
MPRINT(EM_DIAGRAM):   P_SalePrice = _LP0;
39272     +
39273     +drop _R;
MPRINT(EM_DIAGRAM):   drop _R;
39274     +if _Y = . then do;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
39275     +   R_SalePrice = .;
MPRINT(EM_DIAGRAM):   R_SalePrice = .;
39276     +end;
MPRINT(EM_DIAGRAM):   end;
39277     +else do;
MPRINT(EM_DIAGRAM):   else do;
39278     +   _R = _Y - _LP0;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
39279     +    label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
39280     +   R_SalePrice = _R;
MPRINT(EM_DIAGRAM):   R_SalePrice = _R;
39281     +end;
MPRINT(EM_DIAGRAM):   end;
39282     +
39283     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
39284     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
39285     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
39286      run;

NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
      

MPRINT(EM_DIAGRAM):   quit;
39287      quit;
39288      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
39289      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
39290      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
39291      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.25 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M0WVW10O noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0WVW10O;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0WVW10O(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0WVW10O;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0WVW10O;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1V3NZBN NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10RK8BM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
The SAS System

MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V3NZBN;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SALEPRICE") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_SALEPRICE") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("SALEPRICE") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
39621      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
39622      set EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO;
39623      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
39624      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

39625      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
39626      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
39627      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
39628      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
39632      run;
39633      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
39634      set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
39635      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

39636      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
39637      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
39638      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
      
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
