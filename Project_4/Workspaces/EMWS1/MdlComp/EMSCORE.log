MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 12, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:32:29" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 12, 2015
Time:                13:32:29
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1JLHB11 "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1JLHB11 new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
      
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.53 seconds
      cpu time            0.53 seconds
      
69676      /* Generate assessment metadata, which will be used to generate assessment data step */
69677      /* code, such as retrieving names of temporary variables and summary variables,      */
69678      /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
69679      /* roc, index, scoreDist and could be thought as a global variable in assessment     */
69680      /* computation.                                                                      */
69681      data work.ASSESS_1Y476LU_assessMeta_KAKKDX;
MPRINT(EM_DIAGRAM):    data work.ASSESS_1Y476LU_assessMeta_KAKKDX;
69682      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
69682    ! RESULT_MAX_LABEL
69683         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
69684      VARIABLE = "SalePrice";
MPRINT(EM_DIAGRAM):   VARIABLE = "SalePrice";
69685      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
69686      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
69687      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
69688      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
69689      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
69690      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
69691      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
69692      GEN_VAR_IN_TEMP_DATA = "SalePrice";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "SalePrice";
69693      RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
69694      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
69695      RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
69696      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
69697      MIN_ADJUSTED = "SalePric_minAdjusted_ORNING0D6";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "SalePric_minAdjusted_ORNING0D6";
69698      RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
69699      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
69700      MAX_ADJUSTED = "SalePric_maxAdjusted_ZpyRa1u7B";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "SalePric_maxAdjusted_ZpyRa1u7B";
69701      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
69702      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
69703      TEMPORARY_VARIABLE = "SalePrice_OQ6BOH5asc4gBAf";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "SalePrice_OQ6BOH5asc4gBAf";
69704      output;
MPRINT(EM_DIAGRAM):   output;
69705      VARIABLE = "P_SalePrice";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_SalePrice";
69706      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
69707      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
69708      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
69709      LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
69710      PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
69711      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
69712      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
69713      GEN_VAR_IN_TEMP_DATA = "P_SalePrice";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_SalePrice";
69714      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
69715      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
69716      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
69717      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
69718      MIN_ADJUSTED = "P_SalePr_minAdjusted_DuX5mzSHs";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_SalePr_minAdjusted_DuX5mzSHs";
69719      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
69720      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
69721      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
69722      MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
69723      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
69724      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
69725      TEMPORARY_VARIABLE = "P_SalePrice_62y43Uwb8nn_Av0";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_SalePrice_62y43Uwb8nn_Av0";
69726      output;
MPRINT(EM_DIAGRAM):   output;
69727      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_1Y476LU_ASSESSMETA_KAKKDX has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

69728      /* Generate temporary dataset and obtain summary statistics such as total number of   */
69729      /* obserations, frequency of target.  However, summary statistics for class reporting */
69730      /* variabels are not computed here since if there exist class reporting variables,    */
69731      /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
69732      /* summary statisitcs, if any.                                                        */
69733      data work.ASSESS_1Y476LU_normSD_Qw2cqv(drop=
69734      _numberOfObservation_
69735      _intervalTargetMin_ _intervalTargetMax_
69736      )
69737      work.ASSESS_1Y476LU_meansAndTi_atDoSD (keep=
69738      _numberOfObservation_
69739      _intervalTargetMin_ _intervalTargetMax_
69740      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_1Y476LU_normSD_Qw2cqv(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_1Y476LU_meansAndTi_atDoSD (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
69741      set EMWS1.Neural_TRAIN(
69742      where=(
69743      (SalePrice ^= .)
69744      and (P_SalePrice ^= .)
69745      )
69746      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN( where=( (SalePrice ^= .) and (P_SalePrice ^= .) ) ) end=_lastObservation_;
69747      keep frequency_YRb6lf;
MPRINT(EM_DIAGRAM):   keep frequency_YRb6lf;
69748      frequency_YRb6lf = 1;
MPRINT(EM_DIAGRAM):   frequency_YRb6lf = 1;
69749      keep SalePrice;
MPRINT(EM_DIAGRAM):   keep SalePrice;
69750      keep P_SalePrice;
MPRINT(EM_DIAGRAM):   keep P_SalePrice;
69751      output work.ASSESS_1Y476LU_normSD_Qw2cqv;
MPRINT(EM_DIAGRAM):   output work.ASSESS_1Y476LU_normSD_Qw2cqv;
69752      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
69753      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
69754      _numberOfObservation_ + frequency_YRb6lf;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_YRb6lf;
69755      keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
69756      retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
69757      retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
69758      if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
69759      _intervalTargetMin_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_SalePrice;
69760      _intervalTargetMax_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_SalePrice;
69761      end;
MPRINT(EM_DIAGRAM):   end;
69762      else do;
MPRINT(EM_DIAGRAM):   else do;
69763      if (_intervalTargetMin_ > P_SalePrice) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_SalePrice) then do;
69764      _intervalTargetMin_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_SalePrice;
69765      end;
MPRINT(EM_DIAGRAM):   end;
69766      if (_intervalTargetMax_ < P_SalePrice) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_SalePrice) then do;
69767      _intervalTargetMax_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_SalePrice;
69768      end;
MPRINT(EM_DIAGRAM):   end;
69769      end;
MPRINT(EM_DIAGRAM):   end;
69770      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
69771      output work.ASSESS_1Y476LU_meansAndTi_atDoSD;
MPRINT(EM_DIAGRAM):   output work.ASSESS_1Y476LU_meansAndTi_atDoSD;
69772      end;
MPRINT(EM_DIAGRAM):   end;
69773      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 218 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.FILTER_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
      
NOTE: There were 193 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.NEURAL_TRAIN.
      WHERE (SalePrice not = .) and (P_SalePrice not = .);
NOTE: The data set WORK.ASSESS_1Y476LU_NORMSD_QW2CQV has 193 observations and 3 variables.
NOTE: The data set WORK.ASSESS_1Y476LU_MEANSANDTI_ATDOSD has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.31 seconds
      cpu time            0.31 seconds
      

69774      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
69775      set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
69776      where MODEL = "Neural" and TARGET = "SalePrice" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Neural" and TARGET = "SalePrice" and dataRole="TRAIN";
69777      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Neural') and (TARGET='SalePrice') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69778      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
69779      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
69780      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
69781      output;
MPRINT(EM_DIAGRAM):   output;
69782      end;
MPRINT(EM_DIAGRAM):   end;
69783      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69784      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
69785      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
69786      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
69787      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69788      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
69789      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
69790      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
69791      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
69792      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
69793      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
69794      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
69795      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
69796      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
69797      /* tied */
69798      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
69799      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
69800      end;
MPRINT(EM_DIAGRAM):   end;
69801      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
69802      /* next tied */
69803      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
69804      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
69805      end;
MPRINT(EM_DIAGRAM):   end;
69806      output;
MPRINT(EM_DIAGRAM):   output;
69807      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
69808      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
69809      *end;
MPRINT(EM_DIAGRAM):   *end;
69810      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
69811      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
69812      end;
MPRINT(EM_DIAGRAM):   end;
69813      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
69814      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
69815      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
69816      end;
MPRINT(EM_DIAGRAM):   end;
69817      end;
MPRINT(EM_DIAGRAM):   end;
69818      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
69819      /* correct the previous change */
69820      end;
MPRINT(EM_DIAGRAM):   end;
69821      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
69822      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
69823      output;
MPRINT(EM_DIAGRAM):   output;
69824      end;
MPRINT(EM_DIAGRAM):   end;
69825      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
69826      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
69827      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69828      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
69829      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
69830      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
69831      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
69832      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
69833      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
69834      end;
MPRINT(EM_DIAGRAM):   end;
69835      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
69836      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
69837      output;
MPRINT(EM_DIAGRAM):   output;
69838      end;
MPRINT(EM_DIAGRAM):   end;
69839      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
The SAS System


69840      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring NEURAL_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
69841      *------------------------------------------------------------*;
69842      * MdlComp: Scoring NEURAL_TRAIN data;
69843      *------------------------------------------------------------*;
69844      data EMWS1.MdlComp_TRAIN
69845      / view=EMWS1.MdlComp_TRAIN
69846      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
69847      set EMWS1.Neural_TRAIN
69848      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN ;
69849      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
69850     +if (P_SalePrice ge 84265.012444613) then do;
MPRINT(EM_DIAGRAM):   if (P_SalePrice ge 84265.012444613) then do;
69851     +b_SalePrice = 1;
MPRINT(EM_DIAGRAM):   b_SalePrice = 1;
69852     +end;
MPRINT(EM_DIAGRAM):   end;
69853     +else
69854     +if (P_SalePrice ge 82761.1782058872) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 82761.1782058872) then do;
69855     +b_SalePrice = 2;
MPRINT(EM_DIAGRAM):   b_SalePrice = 2;
69856     +end;
MPRINT(EM_DIAGRAM):   end;
69857     +else
69858     +if (P_SalePrice ge 80669.8197890134) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 80669.8197890134) then do;
69859     +b_SalePrice = 3;
MPRINT(EM_DIAGRAM):   b_SalePrice = 3;
69860     +end;
MPRINT(EM_DIAGRAM):   end;
69861     +else
69862     +if (P_SalePrice ge 80153.7808878472) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 80153.7808878472) then do;
69863     +b_SalePrice = 4;
MPRINT(EM_DIAGRAM):   b_SalePrice = 4;
69864     +end;
MPRINT(EM_DIAGRAM):   end;
69865     +else
69866     +if (P_SalePrice ge 76314.5435282256) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76314.5435282256) then do;
69867     +b_SalePrice = 5;
MPRINT(EM_DIAGRAM):   b_SalePrice = 5;
69868     +end;
MPRINT(EM_DIAGRAM):   end;
69869     +else
69870     +if (P_SalePrice ge 75708.4705971031) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 75708.4705971031) then do;
69871     +b_SalePrice = 6;
MPRINT(EM_DIAGRAM):   b_SalePrice = 6;
69872     +end;
MPRINT(EM_DIAGRAM):   end;
69873     +else
69874     +if (P_SalePrice ge 75327.5629670583) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 75327.5629670583) then do;
69875     +b_SalePrice = 7;
MPRINT(EM_DIAGRAM):   b_SalePrice = 7;
69876     +end;
MPRINT(EM_DIAGRAM):   end;
69877     +else
69878     +if (P_SalePrice ge 73871.8179985624) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 73871.8179985624) then do;
69879     +b_SalePrice = 8;
MPRINT(EM_DIAGRAM):   b_SalePrice = 8;
69880     +end;
MPRINT(EM_DIAGRAM):   end;
69881     +else
69882     +if (P_SalePrice ge 73133.4786520537) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 73133.4786520537) then do;
69883     +b_SalePrice = 9;
MPRINT(EM_DIAGRAM):   b_SalePrice = 9;
69884     +end;
MPRINT(EM_DIAGRAM):   end;
69885     +else
69886     +if (P_SalePrice ge 72874.7410722567) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72874.7410722567) then do;
69887     +b_SalePrice = 10;
MPRINT(EM_DIAGRAM):   b_SalePrice = 10;
69888     +end;
MPRINT(EM_DIAGRAM):   end;
69889     +else
69890     +if (P_SalePrice ge 72263.4432956815) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72263.4432956815) then do;
69891     +b_SalePrice = 11;
MPRINT(EM_DIAGRAM):   b_SalePrice = 11;
69892     +end;
MPRINT(EM_DIAGRAM):   end;
69893     +else
69894     +if (P_SalePrice ge 71977.2428734302) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71977.2428734302) then do;
69895     +b_SalePrice = 12;
MPRINT(EM_DIAGRAM):   b_SalePrice = 12;
69896     +end;
MPRINT(EM_DIAGRAM):   end;
69897     +else
69898     +if (P_SalePrice ge 71353.4046177498) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71353.4046177498) then do;
69899     +b_SalePrice = 13;
MPRINT(EM_DIAGRAM):   b_SalePrice = 13;
69900     +end;
MPRINT(EM_DIAGRAM):   end;
69901     +else
69902     +if (P_SalePrice ge 71023.2949934926) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71023.2949934926) then do;
69903     +b_SalePrice = 14;
MPRINT(EM_DIAGRAM):   b_SalePrice = 14;
69904     +end;
MPRINT(EM_DIAGRAM):   end;
69905     +else
69906     +if (P_SalePrice ge 70535.6309822548) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 70535.6309822548) then do;
69907     +b_SalePrice = 15;
MPRINT(EM_DIAGRAM):   b_SalePrice = 15;
69908     +end;
MPRINT(EM_DIAGRAM):   end;
69909     +else
69910     +if (P_SalePrice ge 70113.980729499) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 70113.980729499) then do;
69911     +b_SalePrice = 16;
MPRINT(EM_DIAGRAM):   b_SalePrice = 16;
69912     +end;
MPRINT(EM_DIAGRAM):   end;
69913     +else
69914     +if (P_SalePrice ge 69080.0961066063) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 69080.0961066063) then do;
69915     +b_SalePrice = 17;
MPRINT(EM_DIAGRAM):   b_SalePrice = 17;
69916     +end;
MPRINT(EM_DIAGRAM):   end;
69917     +else
69918     +if (P_SalePrice ge 68185.0769531568) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 68185.0769531568) then do;
69919     +b_SalePrice = 18;
MPRINT(EM_DIAGRAM):   b_SalePrice = 18;
69920     +end;
MPRINT(EM_DIAGRAM):   end;
69921     +else
69922     +if (P_SalePrice ge 66669.1014099092) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 66669.1014099092) then do;
69923     +b_SalePrice = 19;
MPRINT(EM_DIAGRAM):   b_SalePrice = 19;
69924     +end;
MPRINT(EM_DIAGRAM):   end;
69925     +else
69926     +do;
MPRINT(EM_DIAGRAM):   else do;
69927     +b_SalePrice = 20;
MPRINT(EM_DIAGRAM):   b_SalePrice = 20;
69928     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
69929      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.34 seconds
      cpu time            0.34 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.36 seconds
      cpu time            0.35 seconds
      

MPRINT(EM_DIAGRAM):   quit;
69930      quit;
69931      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
69932      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring NEURAL_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
69933      *------------------------------------------------------------*;
69934      * MdlComp: Scoring NEURAL_VALIDATE data;
69935      *------------------------------------------------------------*;
69936      data EMWS1.MdlComp_VALIDATE
69937      / view=EMWS1.MdlComp_VALIDATE
69938      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
69939      set EMWS1.Neural_VALIDATE
69940      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE ;
69941      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
69942     +if (P_SalePrice ge 84265.012444613) then do;
MPRINT(EM_DIAGRAM):   if (P_SalePrice ge 84265.012444613) then do;
69943     +b_SalePrice = 1;
MPRINT(EM_DIAGRAM):   b_SalePrice = 1;
69944     +end;
MPRINT(EM_DIAGRAM):   end;
69945     +else
69946     +if (P_SalePrice ge 82761.1782058872) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 82761.1782058872) then do;
69947     +b_SalePrice = 2;
MPRINT(EM_DIAGRAM):   b_SalePrice = 2;
69948     +end;
MPRINT(EM_DIAGRAM):   end;
69949     +else
69950     +if (P_SalePrice ge 80669.8197890134) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 80669.8197890134) then do;
69951     +b_SalePrice = 3;
MPRINT(EM_DIAGRAM):   b_SalePrice = 3;
69952     +end;
MPRINT(EM_DIAGRAM):   end;
69953     +else
69954     +if (P_SalePrice ge 80153.7808878472) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 80153.7808878472) then do;
69955     +b_SalePrice = 4;
MPRINT(EM_DIAGRAM):   b_SalePrice = 4;
69956     +end;
MPRINT(EM_DIAGRAM):   end;
69957     +else
69958     +if (P_SalePrice ge 76314.5435282256) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76314.5435282256) then do;
69959     +b_SalePrice = 5;
MPRINT(EM_DIAGRAM):   b_SalePrice = 5;
69960     +end;
MPRINT(EM_DIAGRAM):   end;
69961     +else
69962     +if (P_SalePrice ge 75708.4705971031) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 75708.4705971031) then do;
69963     +b_SalePrice = 6;
MPRINT(EM_DIAGRAM):   b_SalePrice = 6;
69964     +end;
MPRINT(EM_DIAGRAM):   end;
69965     +else
69966     +if (P_SalePrice ge 75327.5629670583) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 75327.5629670583) then do;
69967     +b_SalePrice = 7;
MPRINT(EM_DIAGRAM):   b_SalePrice = 7;
69968     +end;
MPRINT(EM_DIAGRAM):   end;
69969     +else
69970     +if (P_SalePrice ge 73871.8179985624) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 73871.8179985624) then do;
69971     +b_SalePrice = 8;
MPRINT(EM_DIAGRAM):   b_SalePrice = 8;
69972     +end;
MPRINT(EM_DIAGRAM):   end;
69973     +else
69974     +if (P_SalePrice ge 73133.4786520537) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 73133.4786520537) then do;
69975     +b_SalePrice = 9;
MPRINT(EM_DIAGRAM):   b_SalePrice = 9;
69976     +end;
MPRINT(EM_DIAGRAM):   end;
69977     +else
69978     +if (P_SalePrice ge 72874.7410722567) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72874.7410722567) then do;
69979     +b_SalePrice = 10;
MPRINT(EM_DIAGRAM):   b_SalePrice = 10;
69980     +end;
MPRINT(EM_DIAGRAM):   end;
69981     +else
69982     +if (P_SalePrice ge 72263.4432956815) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72263.4432956815) then do;
69983     +b_SalePrice = 11;
MPRINT(EM_DIAGRAM):   b_SalePrice = 11;
69984     +end;
MPRINT(EM_DIAGRAM):   end;
69985     +else
69986     +if (P_SalePrice ge 71977.2428734302) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71977.2428734302) then do;
69987     +b_SalePrice = 12;
MPRINT(EM_DIAGRAM):   b_SalePrice = 12;
69988     +end;
MPRINT(EM_DIAGRAM):   end;
69989     +else
69990     +if (P_SalePrice ge 71353.4046177498) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71353.4046177498) then do;
69991     +b_SalePrice = 13;
MPRINT(EM_DIAGRAM):   b_SalePrice = 13;
69992     +end;
MPRINT(EM_DIAGRAM):   end;
69993     +else
69994     +if (P_SalePrice ge 71023.2949934926) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71023.2949934926) then do;
69995     +b_SalePrice = 14;
MPRINT(EM_DIAGRAM):   b_SalePrice = 14;
69996     +end;
MPRINT(EM_DIAGRAM):   end;
69997     +else
69998     +if (P_SalePrice ge 70535.6309822548) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 70535.6309822548) then do;
69999     +b_SalePrice = 15;
MPRINT(EM_DIAGRAM):   b_SalePrice = 15;
70000     +end;
MPRINT(EM_DIAGRAM):   end;
70001     +else
70002     +if (P_SalePrice ge 70113.980729499) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 70113.980729499) then do;
70003     +b_SalePrice = 16;
MPRINT(EM_DIAGRAM):   b_SalePrice = 16;
70004     +end;
MPRINT(EM_DIAGRAM):   end;
70005     +else
70006     +if (P_SalePrice ge 69080.0961066063) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 69080.0961066063) then do;
70007     +b_SalePrice = 17;
MPRINT(EM_DIAGRAM):   b_SalePrice = 17;
70008     +end;
MPRINT(EM_DIAGRAM):   end;
70009     +else
70010     +if (P_SalePrice ge 68185.0769531568) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 68185.0769531568) then do;
70011     +b_SalePrice = 18;
MPRINT(EM_DIAGRAM):   b_SalePrice = 18;
70012     +end;
MPRINT(EM_DIAGRAM):   end;
70013     +else
70014     +if (P_SalePrice ge 66669.1014099092) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 66669.1014099092) then do;
70015     +b_SalePrice = 19;
MPRINT(EM_DIAGRAM):   b_SalePrice = 19;
70016     +end;
MPRINT(EM_DIAGRAM):   end;
70017     +else
70018     +do;
MPRINT(EM_DIAGRAM):   else do;
70019     +b_SalePrice = 20;
MPRINT(EM_DIAGRAM):   b_SalePrice = 20;
70020     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
70021      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.35 seconds
      cpu time            0.34 seconds
      

MPRINT(EM_DIAGRAM):   quit;
70022      quit;
70023      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
70024      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
70025      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
70026      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.43 seconds
      cpu time            0.45 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M2L77M8X noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2L77M8X;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2L77M8X(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2L77M8X;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2L77M8X;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M30VWJ5G NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_O_P_3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   set WORK.M30VWJ5G;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.26 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.35 seconds
      cpu time            0.35 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
